// to delete a single node (to delete we have to first search then delete)
void deleteCustomer(){
    struct Node *curr=start;
    int toDeleteCustomer;
    printf("Enter value you want to delete : ");
    scanf("%d",&toDeleteCustomer);
    //if you want to delete first Node 
    if(toDeleteCustomer==start->customer){
        start=start->next; //update start
        free(curr);//free is used to deallocate memory
    }
    else{//if the node to be deleted is not first you have to maintain prev with respect to curr
        struct Node *prev = start;
        curr = start->next;
        while(curr != NULL){
            if(curr->customer == toDeleteCustomer){
                prev->next = curr->next;
                free(curr);
                break; 
            }
            else{
                prev = prev->next;
                curr = curr->next;
            }
        }
        if(curr == NULL){
            printf("Element not found\n");
        }
    }
}

void getTrump(){
    struct Node *curr = start;      //curr is pointing to start of Linked list
    struct Node *temp = start;      //temp is also pointing to start of Linked

    while (curr->next != NULL && curr->next->next != NULL) {
        temp = temp->next;          //value of temp is updated
        curr = curr->next->next;    //value of curr is update
    }
    //when curr->next->next == NULL and curr->next == NULL
    if (curr->next == NULL) {
        // if nodes are odd then middle value will be winner
        printf("Winner is customer %d",temp->customer);
    }  
    else {
        // if nodes are even then middle 2 values will be winners
        printf("Winners are customers %d and %d",temp->customer,temp->next->customer);
    }
}

void deleteCustomer() {
    if (start == NULL) {
        return;
    }

    struct Node *prev = start;
    while (prev->next->next != NULL) {
        prev = prev->next;
    }

    free(prev->next);
    prev->next = NULL;
}
